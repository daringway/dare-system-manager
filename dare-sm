#!/usr/bin/env sh

CONFIGDIR=/etc/daring
SUBSCRIPTIONDIR=${CONFIGDIR}/subscriptions
DEFAULTDIR=/etc/daring/default

SH=/bin/sh
CP=/bin/cp
ID=/usr/bin/id
FIND=/usr/bin/find
SORT=/usr/bin/sort
RM=/bin/rm
MKDIR=/bin/mkdir
RMDIR=/bin/rmdir
# using perl removes the need for grep, sed, cat
PERL=/usr/bin/perl

PROG=$(basename $0)
RETVAL=0
SUBDIR=""

function printHelp {
   # unknown option
   echo "
  ${PROG} subscriptions [<search>]*
    List current subscriptions.

  ${PROG} subscribe --dir <directory> [<selection>]*  [--dir <directory> [<selections>]* ]*
    Update subscription list

  ${PROG} services [<search>]*
    List services

  ${PROG} <command> all
  ${PROG} <command> [<search>]*
  <command>
    firstboot   : Run during first boot of instance
    boot        : Run during first boot and all subsequent insance boots
    start       : Start services
    stop        : Stop services
    restart     ; Restart services
    status      : Status of services
    unsubscribe : Remove a service from local configuration
    enable      : Temporary enable  a service
    disable     : Temporary disable a service
   " 1>&2
   exit 1
}
function abspath {
    if [[ -d "$1" ]]
    then
        pushd "$1" >/dev/null
        pwd
        popd >/dev/null
    elif [[ -e $1 ]]
    then
        pushd "$(dirname "$1")" >/dev/null
        echo "$(pwd)/$(basename "$1")"
        popd >/dev/null
    else
        echo "$1" does not exist! >&2
        return 127
    fi
}
function error {
    echo $*
    exit 128
}
function log {
    echo $*
}
function checkRoot {
    if [[ $( ${ID} -u) -ne "0" ]]
    then
        error "Must execute command as root"
        exit 128
    fi
}

function _prog_from_service {
    # Format of subscription/00_prog
    local service
    service=$!
    return ${service##*/*[0-9]-}
}

function _installSubscriptions {
    local DIR
    local sub
    local prog
    DIR=$1
    ${MKDIR} -p ${SUBSCRIPTIONDIR}/${DIR} || error "Failed to create subscripiton directory ${SUBSCRIPTIONDIR}/${DIR}"
    for sub in $(ls ${DIR}/[0-9]* 2>/dev/null)
    do
        log "Installing subscription ${SUBDIR}/${DIR}/${sub}"
        ${CP} ${sub} ${SUBSCRIPTIONDIR}/${DIR} || error "Failed to install subscription to ${SUBSCRIPTIONDIR}/${DIR}"
        prog=${DEFAULTDIR}/${sub##*[0-9]-}
        if [ ! -e ${prog} ]
        then
            if [ ! -d ${DEFAULTDIR} ]
            then
                ${MKDIR} -p ${DEFAULTDIR} || error "Failed to create default dir ${DEFAULTDIR}"
            fi
            perl -ne 'if (/DEFAULT%START%/../DEFAULT%END%/) {print unless /DEFAULT%(START|END)%/}' ${sub} > ${prog}
        fi
    done
}
function _subscribeDir() {
    local dir
    local dir2
    local fdir
    local list
    local EC=0
    if [ "$1" == "-e" ]
    then
        EC=1
        shift
    fi
    dir=$1
    if [ -f ${dir}/subscriber ]
    then
        list=$(cd ${dir}; ${SH} subscriber)
        if [ "$?" -eq "0" ]
        then
            if [ "$EC" -eq "1" ]
            then
                _installSubscriptions ${dir}
            fi
            for dir2 in ${list}
            do
                if [ ${dir2} == '.' ]
                then
                    _installSubscriptions ${dir}
                else
                    if [ ${dir} == "." ]
                    then
                        fdir=${dir2}
                    else
                        fdir="${dir}/${dir2}"
                    fi
                    if [ -d ${fdir} ]
                    then
                        _subscribeDir -e ${fdir}
                    fi
                fi
            done
        fi
    elif [ -d ${dir} ]
    then
        if [ "$EC" -eq "1" ]
        then
            _installSubscriptions ${dir}
        fi
        for dir2 in $(ls ${dir} 2>/dev/null)
        do
            if [ ${dir} == "." ]
            then
                fdir=${dir2}
            else
                fdir="${dir}/${dir2}"
            fi
            if [ -d ${fdir} ]
            then
                _subscribeDir ${fdir}
            fi
        done
    fi
}
function subscribe {
    if [[ $1 != "--dir" ]]
    then
        printHelp
        # TODO read from config file
    fi
    while [[ $# -gt 0 ]]
    do
        if [[ "$1" == "--dir" ]]
        then
            SUBDIR=$2
            shift
            shift
            if [[ ! -e ${SUBDIR}/subscriber ]]
            then
                error "subscriber must exist in root directory $(abspath ${SUBDIR})"
            fi
            if [[ $# -eq 0 || $1 == "--dir" ]]
            then
                (cd ${SUBDIR} &&  _subscribeDir .)
            fi
        else
            if [[ "$PREFIX" == "1" ]]
            then
                _subscribeDir -e $(abspath ${SUBDIR}/${1})
            else
                (cd ${SUBDIR}; _subscribeDir -e ${1})
            fi
            shift
        fi
    done
}
function subscriptions() {
    local sub
    local LIMIT
    if [[ $# -eq 0 ]]
    then
        printHelp
    elif [[ ! -d ${SUBSCRIPTIONDIR} ]]
    then
        return
    elif [[ $1 == "all" ]]
    then
        LIMIT='*'
    else
        LIMIT="$*"
    fi
    (cd $SUBSCRIPTIONDIR; ${FIND} . -name '[0-9]*' -type f) |
        (export LIMIT; ${PERL} -pe 's:^./::; if(! $pat){$pat=join("|", split(/\s+/, "$ENV{LIMTI}"))}; print if /$pat/' ) | while read sub
    do
        echo ${sub%/*}
    done | ${SORT} -u
}
function services() {
    local sub
    if [[ $# -eq 0 ]]
    then
        printHelp
    elif [[ $1 == "all" ]]
    then
        LIMIT='*'
    else
        LIMIT="$*"
    fi
    (cd $SUBSCRIPTIONDIR; ${FIND} . -name '[0-9]*' -type f) |
       (export LIMIT; ${PERL} -pe 's:^./::; if(! $pat){$pat=join("|", split(/\s+/, "$ENV{LIMTI}"))}; print if /$pat/' ) | while read sub
    do
        echo ${sub##*/} ${sub}
    done | ${SORT} -n | perl -pe 's/^[^\s]+\s//'
}
function unsubscribe {
    local sub
    local prog
    subscriptions $* | while read sub
    do
        log unsubscribe $sub
        for prog in $(ls ${SUBSCRIPTIONDIR}/${sub})
        do
            log removing defaults for ${prog}
            ${RM} ${DEFAULTDIR}/${prog##*[0-9]-}
        done
        ${RM} -r ${SUBSCRIPTIONDIR}/$sub
    done
    ${FIND} ${SUBSCRIPTIONDIR} -depth  -type d -empty -exec ${RMDIR}  {} \;
}
function firstboot {
    local RUN
    for RUN in $(services $*)
    do
        echo "Firstboot ${RUN}"
        ${SUBSCRIPTIONDIR}/${RUN} firstboot
    done
}
function boot {
    local RUN
    for RUN in $(services $*)
    do
        echo "Boot ${RUN}"
        ${SUBSCRIPTIONDIR}/${RUN} boot
    done
}
function start {
    local RUN
    for RUN in $(services $*)
    do
        echo "Starting ${RUN}"
        ${SUBSCRIPTIONDIR}/${RUN} start
    done
}
function status {
    local RUN
    for RUN in $(services $*)
    do
        echo "Status ${RUN}"
        ${SUBSCRIPTIONDIR}/${RUN} status
    done
}
function stop {
    local RUN
    for RUN in $(services $*)
    do
        echo "Stopping ${RUN}"
        ${SUBSCRIPTIONDIR}/${RUN} stop
    done
}
function restart {
    local RUN
    for RUN in $(services $*)
    do
        echo "Restarting ${RUN}"
        ${SUBSCRIPTIONDIR}/${RUN} restart
    done
}
function enable {
    local RUN
    local prog
    for RUN in $(services $*)
    do
        echo "Enable ${RUN}"
        prog=${DEFAULTDIR}/${RUN##*/*[0-9]-}
        ${PERL} -ni -e '
            if (/^\s*ENABLE=.*$/) { print "ENABLE=TRUE\n"; $DID=1}
            else { print }
            if (eof && ! $DID)      { print "ENABLE=TRUE\n"}' ${prog}
    done
}
function disable {
    local RUN
    for RUN in $(services $*)
    do
        echo "Disable ${RUN}"
        prog=${DEFAULTDIR}/${RUN##*/*[0-9]-}
        ${PERL} -ni -e '
            if (/^\s*ENABLE=.*$/) { print "ENABLE=FALSE\n"; $DID=1}
            else { print }
            if (eof && ! $DID)     { print "ENABLE=FALSE\n"}' ${prog}
    done
}

COMMAND=$1
shift
case "${COMMAND}" in
    subscribe)
        checkRoot
        subscribe $*
	;;
	unsubscribe)
	    checkRoot
        unsubscribe $*
	;;
	enable)
	    checkRoot
	    enable $*
	;;
	disable)
	    checkRoot
	    disable $*
	;;
	subscriptions)
	    subscriptions ${*:-all}
	;;
	services)
	    services ${*:-all}
	;;
	firstboot)
	    checkRoot
        firstboot $*
    ;;
	boot)
	    checkRoot
        boot $*
    ;;
    start)
        checkRoot
        start $*
    ;;
	stop)
	    checkRoot
        stop $*
    ;;
	restart)
	    checkRoot
        restart $*
    ;;
	status)
        status $*
    ;;
    *)
        printHelp
        RETVAL=3
    ;;
esac
exit $RETVAL