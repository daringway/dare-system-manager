#!/bin/sh


. /etc/default/dare-sm

getZone() {
    local DOMAIN=$(echo $1 | perl -pe 's/^.*_[^_.]+\.([^_]+\.)json/$1/' )
    aws route53 list-hosted-zones --query "HostedZones[?Name==\`${DOMAIN}\`].[Id]"  --output text
}
install() {
    # Nothing to install.  This works with Route53 set of ByEC2Tag
    return ${RC_NOT_IMPLEMENTED}
}
upgrade() {
    return ${RC_NOT_IMPLEMENTED}
}
# Used by dare-sm during install/upgrade
installStart() {
    start
    return $?
}
# Used by dare-sm during install/upgrade
installStop() {
    stop
    return $?
}
status() {
    return 4
}
start() {
    RRC=0
    for FILE in $(ls ${DARE_ETC}/route53-start_*.json 2>/dev/null)
    do
        ZONE=$(getZone $FILE)
        echo "zone start ${ZONE} $FILE"
        if ! aws route53 change-resource-record-sets --hosted-zone-id ${ZONE} --change-batch file://${FILE}
        then
            logger -t dare-sm ERROR failed start ${FILE}
            RRC=$?
        else
            logger -t dare-sm INFO success start ${FILE}
        fi
    done
    return $RRC
}
stop() {
    RRC=0
    for FILE in $(ls ${DARE_ETC}/route53-stop_*.json 2>/dev/null)
    do
        ZONE=$(getZone $FILE)
        echo "zone stop ${ZONE} $FILE"
        if ! aws route53 change-resource-record-sets --hosted-zone-id ${ZONE} --change-batch file://${FILE}
        then
            logger -t dare-sm ERROR failed stop ${FILE}
            RRC=$?
        else
            logger -t dare-sm INFO success stop ${FILE}
        fi
    done
    return $RRC
}
restart() {
    if stop
    then
        start
        return $?
    else
        return $?
    fi
}

case "$1" in
    install)
        install
        RETVAL=$?
	;;
	upgrade)
	    upgrade
	    RETVAL=$?
    ;;
    install-start)
        installStart
        RETVAL=$?
	;;
    install-stop)
        installStop
        RETVAL=$?
	;;
	start)
        start
        RETVAL=$?
    ;;
    stop)
        stop
        RETVAL=$?
	;;
	restart)
        restart
        RETVAL=$?
    ;;
    status)
        status
        RETVAL=$?
	;;
    *)
        echo "$0: $1 option not implemented"
        echo "Usage: $0 {install|upgrade|start|stop|restart|status}"
        RETVAL=3
	;;
esac

exit ${RETVAL}

# LSB RC (Return Codes) for all commands but status:
# 0	 - success
# 1  - generic or unspecified error
# 2  - invalid or excess argument(s)
# 3  - unimplemented feature (e.g. "reload")
# 4  - user had insufficient privileges
# 5  - program is not installed
# 6  - program is not configured
# 7  - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.
#
# LSB RC for status command:
# 0 - service up and running
# 1 - service dead, but /var/run/  pid  file exists
# 2 - service dead, but /var/lock/ lock file exists
# 3 - service not running (unused)
# 4 - service status unknown :-(
# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)