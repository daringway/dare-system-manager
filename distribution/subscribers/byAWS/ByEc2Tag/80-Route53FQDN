#!/bin/sh

# This works in conjunction with route53-init
#
# Similar to Route53Hostname but the FQDN name is specified.
#
# Tag: Route53FQDN
# Values: comma separated of KEY:VALUE pairs
# Examples:
#   FQDN:IP-type
#   bugs.acme.com:public       -- Uses the public-ipv4
#   bugs.acme.com:public-ipv4  -- Uses the public-ipv4
#   bugs.acme.com:local-ipv4   -- Uses the local-ipv4
#   bugs.acme.com:local        -- Uses the local-ipv4
#
# Sets the hostname bugs in the Zone acme.com to the public or local ipv4 address.

. /etc/default/dare-sm

# "Action": "CREATE"|"DELETE"|"UPSERT",
JSON='
{
  "Comment": "Updated by dare-sm 80-Route53ARecord",
  "Changes": [
    {
      "Action": "X-ACTION-X",
      "ResourceRecordSet": {
        "Name": "X-FQDN-X",
        "Type": "A",
        "TTL": 60,
        "ResourceRecords": [
          {
            "Value": "X-IP-X"
          }
        ]
      }
    }
  ]
}
'

install() {
    ZONE=$(aws route53 list-hosted-zones --query "HostedZones[?Name==\`${DOMAIN}\`].[Id]"  --output text)
    my-ec2 instance-tag Route53Hostname |perl -pe 's/:/ /g, s/,/\n/g'  | while read FQDN IPTYPE
    do
        if [[ "$FQDN" != *. ]]
        then
            FQDN=${FQDN}.
        fi
        if [[ "$( echo ${IPTYPE} | tr A-Z a-z)" == public-ipv4 ]]
        then
            export IP4=$(my-ec2 public-ipv4)
        else
            export IP4=$(my-ec2 local-ipv4)
        fi


        JSON_FILE=${DARE_ETC}/route53-start_${FQDN}json
        echo $JSON | perl -pe 's/X-ACTION-X/CREATE/; s/X-FQDN-X/$ENV{FQDN}/; s/X-IP-X/$ENV{IP4}/;' > $JSON_FILE

        JSON_FILE=${DARE_ETC}/route53-stop_${FQDN}json
        echo $JSON | perl -pe 's/X-ACTION-X/DELETE/; s/X-FQDN-X/$ENV{FQDN}/; s/X-IP-X/$ENV{IP4}/;' > $JSON_FILE
    done

    return 0
}

upgrade() {
    return ${RC_NOT_IMPLEMENTED}
}
# Used by dare-sm during install/upgrade
installStart() {
    return ${RC_NOT_IMPLEMENTED}
}
# Used by dare-sm during install/upgrade
installStop() {
    return ${RC_NOT_IMPLEMENTED}
}
status() {
    return 4
}
start() {
    return ${RC_NOT_IMPLEMENTED}
}
stop() {
    return ${RC_NOT_IMPLEMENTED}
}
restart() {
    if stop
    then
        start
        return $?
    else
        return $?
    fi
}
case "$1" in
    install)
        install
        RETVAL=$?
	;;
	upgrade)
	    upgrade
	    RETVAL=$?
    ;;
    install-start)
        installStart
        RETVAL=$?
	;;
    install-stop)
        installStop
        RETVAL=$?
	;;
	start)
        start
        RETVAL=$?
    ;;
    stop)
        stop
        RETVAL=$?
	;;
	restart)
        restart
        RETVAL=$?
    ;;
    status)
        status
        RETVAL=$?
	;;
    *)
        echo "$0: $1 option not implemented"
        echo "Usage: $0 {install|upgrade|start|stop|restart|status}"
        RETVAL=3
	;;
esac

exit ${RETVAL}

# LSB RC (Return Codes) for all commands but status:
# 0	 - success
# 1  - generic or unspecified error
# 2  - invalid or excess argument(s)
# 3  - unimplemented feature (e.g. "reload")
# 4  - user had insufficient privileges
# 5  - program is not installed
# 6  - program is not configured
# 7  - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.
#
# LSB RC for status command:
# 0 - service up and running
# 1 - service dead, but /var/run/  pid  file exists
# 2 - service dead, but /var/lock/ lock file exists
# 3 - service not running (unused)
# 4 - service status unknown :-(
# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)