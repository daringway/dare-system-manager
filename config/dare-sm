#!/usr/bin/env sh

CONFIGDIR=/etc/daring/subscriptions

PATH=/sbin:/bin:/usr/bin

SH=sh
CP=cp
ID=id
FIND=find
SORT=sort
RM=rm
MKDIR=mkdir
RMDIR=rmdir
LS=ls
CAT=cat
GREP=grep
# using perl removes the need for grep, sed, cat
PERL=perl

PROG=$(basename $0)
RETVAL=0
SUBDIR=""

function printHelp {
   echo $* 1>&2
   echo "
  ${PROG} subscriptions [<search>]*
    List current subscriptions.

  ${PROG} subscribe <subscription>+
    Manual add subscription. Must be used with install.

  ${PROG} subscribe --dir <directory> [<selection>]*  [--dir <directory> [<selections>]* ]*
    Update and install subscription list

  ${PROG} install --dir <directory> [--dir <directory>]*
    If you have a seperate set of service directories from the subscribe directory.

  ${PROG} services [<search>]*
    List services

  ${PROG} update
    Update dare-sm

  ${PROG} <command> all
  ${PROG} <command> [<search>]*
  <command>
    install     : Run during first boot of instance
    update      : Upgrade the services
    start       : Start services
    stop        : Stop services
    restart     ; Restart services
    status      : Status of services
    unsubscribe : Remove a service from local configuration
    enable      : Temporary enable  a service
    disable     : Temporary disable a service
   " 1>&2
   exit 1
}
function abspath {
    if [[ -d "$1" ]]
    then
        pushd "$1" >/dev/null
        pwd
        popd >/dev/null
    elif [[ -e $1 ]]
    then
        pushd "$(dirname "$1")" >/dev/null
        echo "$(pwd)/$(basename "$1")"
        popd >/dev/null
    else
        echo "$1" does not exist! >&2
        return 127
    fi
}
function error {
    echo $*
    exit 128
}
function log {
    echo $*
}
function _getSettingFile {
    local file
    file=${CONFIGDIR}/${1}.settings
    if [ ! -f ${file} ]
    then
        touch ${file}
    fi
    echo ${file}
}
function checkRoot {
    if [[ $( ${ID} -u) -ne "0" ]]
    then
        error "Must execute command as root"
        exit 128
    fi
}

function _mark {
    # PARAMETERS VALUE TAG [services pattern]
    local RUN
    local prog
    local TAG
    export TAG=$1
    shift
    export VALUE=$1
    shift

    for RUN in $(services $*)
    do
        prog=$(_getSettingFile ${RUN})
        if [ -s ${prog} ]
        then
            ${PERL} -ni -e '
                if (! /^\s*$ENV{TAG}=.*$/) { print };
                if (eof) { print "$ENV{TAG}=$ENV{VALUE}\n"} ' ${prog}
        else
            echo "${TAG}=${VALUE}" > ${prog}
        fi
    done
}

function _installSubscriptions {
    local DIR
    local ETCSUBDIR
    local SUBSCRIPTION
    local sub
    local settings
    DIR=$1
    SUBSCRIPTION=$(echo $DIR | perl -pe 's#/#:#g; s/\.://g')
    ETCSUBDIR=${CONFIGDIR}/${SUBSCRIPTION}

    if [ ! -d ${ETCSUBDIR} ]
    then
        ${MKDIR} -p ${ETCSUBDIR} || error "Failed to create subscripiton directory ${ETCSUBDIR}"
    fi
    for sub in $(ls ${DIR}/[0-9]* 2>/dev/null)
    do
        log "Installing subscription ${SUBDIR}/${sub}"
        ${CP} ${sub} ${ETCSUBDIR} || error "Failed to install subscription to ${SETCSUBDIR}"

        settings=$(_getSettingFile ${SUBSCRIPTION}/$(basename ${sub}))
        if [ ! -s ${settings} ]
        then
            ${PERL} -ne 'if (/DEFAULT%START%/../DEFAULT%END%/) {print unless /DEFAULT%(START|END)%/}' ${sub} > ${settings}
        fi
    done
}
function _descendDir() {
    local dir
    local dir2

    dir=$1

    if [ -d ${dir} ]
    then
        for dir2 in $(ls ${dir} 2>/dev/null)
        do
            if [ -d "${dir}/${dir2}" ]
            then
                _subscribeDir "${dir}/${dir2}"
            fi
        done
    fi
}
function _subscribeDir() {
    local dir
    local dir2
    local list
    local RC

    dir=$1
    if [ -f ${dir}/subscriber ]
    then
        list=$(cd ${dir}; ${SH} subscriber)
        RC=$?
        for dir2 in ${list}
        do
            if [ ${dir2} == '.' ]
            then
                _installSubscriptions ${dir}
                if [ "$RC" -eq "0" ]
                then
                    _descendDir ${dir}
                fi
            elif [ -d ${dir}/${dir2} ]
            then
                if [ -f ${dir}/${dir2}/subscriber ]
                then
                    _subscribeDir ${dir}/${dir2}
                else
                    _installSubscriptions ${dir}/${dir2}
                    _descendDir ${dir}/${dir2}
                fi
            fi
        done
    else
        _descendDir ${dir}
    fi
}
function subscribe {
    if [[ $1 != "--dir" ]]
    then
        local SUBSCRIPTION
        for SUBSCRIPTION in $*
        do
            if [ ! -d ${CONFIGDIR}/${SUBSCRIPTION} ]
            then
                ${MKDIR} -p ls /${CONFIGDIR}/${SUBSCRIPTION} || error "Failed to create subscription directory ${ETCSUBDIR}"
            fi
        done
    else
        while [[ $# -gt 0 ]]
        do
            if [[ "$1" == "--dir" ]]
            then
                SUBDIR=$2
                shift
                shift
                if [[ ! -e ${SUBDIR}/subscriber ]]
                then
                    error "subscriber must exist in root directory $(abspath ${SUBDIR})"
                fi
                if [[ $# -eq 0 || $1 == "--dir" ]]
                then
                    (cd ${SUBDIR} &&  _subscribeDir .)
                fi
            else
                if [[ "$PREFIX" == "1" ]]
                then
                    _subscribeDir -e $(abspath ${SUBDIR}/${1})
                else
                    (cd ${SUBDIR}; _subscribeDir -e ${1})
                fi
                shift
            fi
        done
    fi
}

function subscriptions() {
    local sub
        local LIMIT
    if [[ $# -eq 0 ]]
    then
        printHelp "list of subscriptions or all"
    elif [[ $1 == "all" ]]
    then
        LIMIT='.'
    else
        LIMIT="$*"
    fi
    ( cd $CONFIGDIR;
      export LIMIT;
      ${LS} |
      ${PERL} -ne '
        if(! $pat){$pat=join("|", split(/\s+/, "$ENV{LIMIT}"))};
        print if /$pat/;
        '
    )
}

function services() {
    local sub
    local LIMIT
    if [[ $# -eq 0 ]]
    then
        printHelp "expected search pattern or all"
    elif [[ $1 == "all" ]]
    then
        LIMIT='.'
    else
        LIMIT="$*"
    fi
    (  export LIMIT;
      cd ${CONFIGDIR} && ${LS} */[0-9]* |
      ${PERL} -ne '
          if(! $pat){$pat=join("|", split(/\s+/, "$ENV{LIMIT}"))};
          print if /$pat/ && !/.settings$/;
          '
    ) | ${SORT} -n -t/ -k2
}
function unsubscribe {
    local sub
    local prog

    subscriptions $* | while read sub
    do
        log unsubscribe $sub
        for prog in $(cd ${SETTINGDIR} && ls ${sub}:* 2>/dev/null)
        do
            log removing defaults for ${prog}
            ${RM} ${SETTINGDIR}/${prog} || error "Failed to remove default file ${DEFAULTDIR}/${prog}"
        done
        ${RM} -r ${CONFIGDIR}/$sub || error "Failed to remove subscription directory ${CONFIGDIR}/$sub"
    done
}

function install {
    local RUN
    for RUN in $(services $*)
    do
        if $GREP 'INSTALLED=TRUE' $(_getSettingFile ${RUN})>/dev/null
        then
            echo "Skipping ${RUN}, already installed"
        else
            echo "Install ${RUN}"
            if ${SH} ${CONFIGDIR}/${RUN} install
            then
                _mark INSTALLED TRUE ${RUN}
            fi
        fi
    done
}
function upgrade {
    local RUN
    for RUN in $(services $*)
    do
        if ! $GREP 'INSTALLED=TRUE' $(_getSettingFile ${RUN})>/dev/null
        then
            install ${RUN}
        fi
        if $GREP 'INSTALLED=TRUE' $(_getSettingFile ${RUN})>/dev/null
        then
            echo "upgrade ${RUN}"
            ${SH} ${CONFIGDIR}/${RUN} upgrade
        else
            echo "Skipping ${RUN}, not installed"
        fi
    done
}
function start {
    local RUN
    for RUN in $(services $*)
    do
        if $GREP 'INSTALLED=TRUE' $(_getSettingFile ${RUN})>/dev/null
        then
            echo "Starting ${RUN}"
            ${SH} ${CONFIGDIR}/${RUN} start
        else
            echo "Skipping ${RUN}, not installed"
        fi
    done
}
function status {
    local RUN
    for RUN in $(services $*)
    do
        echo "Status ${RUN}"
        ${CAT} $(_getSettingFile ${RUN})
        ${SH} ${CONFIGDIR}/${RUN} status
    done
}

function stop {
    local RUN
    for RUN in $(services $*)
    do
        if $GREP 'INSTALLED=TRUE' $(_getSettingFile ${RUN})>/dev/null
        then
            echo "Stopping ${RUN}"
            ${SH} ${CONFIGDIR}/${RUN} start
        else
            echo "Skipping ${RUN}, not installed"
        fi
    done
}
function restart {
    local RUN
    for RUN in $(services $*)
    do
        echo "Restarting ${RUN}"
        ${SH} ${CONFIGDIR}/${RUN} restart
    done
}

COMMAND=$1
shift
case "${COMMAND}" in
    subscribe)
        checkRoot
        subscribe $*
	;;
	install)
        checkRoot
        install $*
	;;
	unsubscribe)
	    checkRoot
        unsubscribe $*
	;;
	enable)
	    checkRoot
	    _mark ENABLE TRUE $*
	;;
	disable)
	    checkRoot
	    _mark ENABLE FALSE $*
	;;
	subscriptions)
	    subscriptions ${*:-all}
	;;
	services)
	    services ${*:-all}
	;;
	install)
	    checkRoot
        install $*
    ;;
	upgrade)
	    checkRoot
        upgrade $*
    ;;
    start)
        checkRoot
        start $*
    ;;
	stop)
	    checkRoot
        stop $*
    ;;
	restart)
	    checkRoot
        restart $*
    ;;
	status)
        status $*
    ;;
    *)
        printHelp
        RETVAL=3
    ;;
esac
exit $RETVAL